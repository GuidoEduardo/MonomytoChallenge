// <auto-generated/>
using MonomytoChallenge.Models;
using MonomytoChallenge.Controllers;
using Microsoft.AspNetCore.Mvc;
using MonomytoChallenge.Data;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;

namespace MonomytoChallenge.Tests
{
    public class ProdutoTest
    {
        readonly private ApiContext contextMock;
        readonly private SqliteConnection connection;
        readonly private ProdutoController produtoController;

        public ProdutoTest()
        {
            connection = new SqliteConnection("Data Source=:memory:");
            connection.Open();

            contextMock = new ApiContext(new DbContextOptionsBuilder<ApiContext>().UseSqlite(connection).Options);
            contextMock.Database.EnsureCreated();

            produtoController = new ProdutoController(contextMock);

            AddProdutos();
        }

        [Fact]
        public async Task Get_ById_ReturnsOkResult()
        {
            // Arrange
            var testGuid = new Guid("a9807de2-1943-4744-b446-14c1cba5a9db");

            // Act
            JsonResult jsonResult = await produtoController.Get(testGuid);
            var result = jsonResult.Value as OkObjectResult;

            // Assert
            AssertResponse<OkObjectResult>(200, result.StatusCode, result);

            var item = Assert.IsType<Produto>(result.Value);
            Assert.Equal(testGuid, item.Id);
        }

        [Fact]
        public async Task Get_ById_ReturnsNotFound()
        {
            // Arrange
            var testGuid = new Guid("970d8e96-9041-4f0a-9871-89330683e318");

            // Act
            JsonResult jsonResult = await produtoController.Get(testGuid);
            var result = jsonResult.Value as NotFoundObjectResult;

            // Assert
            AssertResponse<NotFoundObjectResult>(404, result.StatusCode, result);
        }

        [Fact]
        public async Task Get_All_ReturnsOkResult()
        {
            // Act
            JsonResult jsonResult = await produtoController.Get();
            var result = jsonResult.Value as OkObjectResult;

            // Assert
            AssertResponse<OkObjectResult>(200, result.StatusCode, result);

            var produtos = Assert.IsType<List<Produto>>(result.Value);
            Assert.Equal(5, produtos.Count);
        }

        [Fact]
        public async Task Get_SearchByNome_ReturnsOkResult()
        {
            // Arrange
            var searchNome = "700mL";

            // Act
            JsonResult jsonResult = await produtoController.Get(searchNome: searchNome);
            var result = jsonResult.Value as OkObjectResult;

            // Assert
            AssertResponse<OkObjectResult>(200, result.StatusCode, result);

            var produtos = Assert.IsType<List<Produto>>(result.Value);
            Assert.Equal(2, produtos.Count);
        }

        [Fact]
        public async Task Get_FilterByTeor_ReturnsOkResult()
        {
            // Arrange
            var minTeor = 50;
            var maxTeor = 60;

            // Act
            JsonResult jsonResult = await produtoController.Get(minTeor: minTeor, maxTeor: maxTeor);
            var result = jsonResult.Value as OkObjectResult;

            // Assert
            AssertResponse<OkObjectResult>(200, result.StatusCode, result);

            var produtos = Assert.IsType<List<Produto>>(result.Value);
            Assert.Single(produtos);
        }

        [Fact]
        public async Task GetReport_All_ReturnsOkResult()
        {
            // Act
            JsonResult jsonResult = await produtoController.Report();
            var result = jsonResult.Value as OkObjectResult;

            // Assert
            AssertResponse<OkObjectResult>(200, result.StatusCode, result);

            var produtos = Assert.IsType<List<ProdutoReport>>(result.Value);
            Assert.Equal(5, produtos.Count);
        }

        private void AssertResponse<TResponse>(int statusCode, int? resultStatusCode, TResponse result)
        {
            Assert.NotNull(result);
            Assert.True(result is TResponse);
            Assert.IsType<TResponse>(result);
            Assert.Equal(statusCode, resultStatusCode);
        }

        private void AddProdutos()
        {
            string responseBody = string.Empty;

            string path = Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.FullName + "\\Seeders\\Produtos.json";

            using (StreamReader r = new StreamReader(path))
            {
                responseBody = r.ReadToEnd();
            }

            List<Produto> produtos = JsonConvert.DeserializeObject<List<Produto>>(responseBody);

            contextMock.AddRange(produtos);
            contextMock.SaveChanges();
        }
    }
}
