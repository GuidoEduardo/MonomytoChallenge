// <auto-generated/>
#nullable enable
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc;
using MonomytoChallenge.Data;
using MonomytoChallenge.Models;


namespace MonomytoChallenge.Controllers
{
    // Configuração de controller e construção de rotas
    // da API para gerenciamento da entidade Cliente
    [Route("api/[controller]")]
    [ApiController]
    public class ClienteController : ControllerBase
    {
        private readonly ApiContext context;

        public ClienteController(ApiContext context)
        {
            this.context = context;
        }

        [HttpGet]
        [Route("{id?}")]
        public async Task<JsonResult> Get(
            Guid? id = null, 
            string? searchNome = "", 
            DateTime? minDate = null, 
            DateTime? maxDate = null)
        {
            // Inicia a construção da consulta para Clientes
            IQueryable<Cliente> clientes = this.context.Clientes;

            // Se consultado por Id, retorna apenas o cliente consultado
            if (id.HasValue)
            {
                try
                {
                    return new JsonResult(this.Ok(
                        await clientes.AsNoTracking().FirstAsync(c => c.Id == id.Value)
                    ));
                }
                catch (Exception e)
                {
                    return new JsonResult(NotFound(e.Message));
                }
            }

            // Filtragem por nome - case insensitive
            if (!String.IsNullOrEmpty(searchNome))
            {
                // Consulta a entidade Cliente em busca do nome obtido
                clientes = clientes.Where(c => c.Nome!.ToLower().Contains(searchNome.ToLower()));
            }

            // Filtragem de período pela data inicial
            if (minDate.HasValue)
            {
                // Consulta entidade Cliente pela Data de nascimento
                clientes = clientes.Where(c => c.DataNascimento >= minDate);
            }

            // Filtragem de período pela data final
            if (maxDate.HasValue)
            {
                // Consulta entidade Cliente pela Data de nascimento
                clientes = clientes.Where(c => c.DataNascimento <= maxDate);
            }

            try
            {
                // Retorna todos os clientes filtrados com uma resposta de sucesso
                return new JsonResult(this.Ok(
                    await clientes.AsNoTracking().ToListAsync()
                ));
            }
            catch (Exception e)
            {
                return new JsonResult(BadRequest(e.Message));
            }
        }

        // Relatório de vendas por cliente 
        [HttpGet]
        [Route("Report")]
        public async Task<JsonResult> Report(
            int qtItens = 1,
            DateTime? minDate = null, 
            DateTime? maxDate = null)
        {
            // Inicia a construção da consulta para Vendas
            IQueryable<Venda> vendas = this.context.Vendas;

            // Filtragem de vendas por data inicial
            if (minDate.HasValue)
            {
                vendas = vendas.Where(v => v.Data >= minDate);
            }

            // Filtragem de vendas por data final
            if (maxDate.HasValue)
            {
                vendas = vendas.Where(v => v.Data <= maxDate);
            }

            // Join das tabelas Vendas e Itens através do Id da Venda

            var vendasJoin = await vendas
                .Join(
                    this.context.Itens,
                    v => v.Id,
                    i => i.IdVenda,
                    (v, i) => new
                    {
                        v.IdCliente,
                        i.Produto,
                        i.Quantidade,
                        PrecoVenda = i.PrecoUnitario * i.Quantidade,
                    }
                ).ToListAsync();

            // Group By por Cliente e Produto
            var produtos = vendasJoin
                .GroupBy(
                    k => new { k.IdCliente, k.Produto },
                    g => new { g.Quantidade, g.PrecoVenda },
                    (k, g) => new
                    {
                        k.IdCliente,
                        k.Produto,
                        TotalQuantidade = g.Sum(p => p.Quantidade),
                        TotalValor = g.Sum(p => p.PrecoVenda)
                    });

            // Realiza a consulta por clientes
            var clientes = await this.context.Clientes.AsNoTracking().ToListAsync();

            try {
                // Realiza o retorno e construção do retorno para a lista de Clientes
                return new JsonResult(Ok(
                    clientes.Select(c => new ClienteReport
                        {
                            Id = c.Id,
                            Nome = c.Nome,

                            // Propriedade produtos no JSON
                            Produtos = produtos
                                        // Captura todos os produtos do Cliente
                                        .Where(p => p.IdCliente == c.Id)
                                        .Select(p => new ProdutoReport
                                        {
                                            Produto = p.Produto,
                                            TotalQuantidade = p.TotalQuantidade,
                                            TotalValor = p.TotalValor
                                        })
                                        // Ordenação por mais vendidos
                                        .OrderByDescending(p => p.TotalQuantidade)
                                        // Total de produtos retornados
                                        .Take(qtItens),

                            TotalValor = vendas
                                        // Captura todas as vendas do Cliente
                                        .Where(v => v.IdCliente == c.Id)
                                        // Soma das vendas
                                        .Sum(v => v.Itens!.Sum(i => i.PrecoUnitario * i.Quantidade)),

                            TotalVendas = vendas
                                        // Captura todas as vendas do Cliente
                                        .Where(v => v.IdCliente == c.Id)
                                        // Captura das quantidades vendidas
                                        .Sum(v => v.Itens!.Sum(i => i.Quantidade)),
                        })
                    )
                );
            }
            catch (Exception e)
            {
                return new JsonResult(BadRequest(e.Message));
            }
        }
    }
}
