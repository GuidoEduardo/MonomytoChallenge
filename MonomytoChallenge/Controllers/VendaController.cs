// <auto-generated />
#nullable enable
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MonomytoChallenge.Data;
using MonomytoChallenge.Models;


namespace MonomytoChallenge.Controllers
{
    // Configuração de controller e construção de rotas
    // da API para gerenciamento de entidade Venda
    [Route("api/[controller]")]
    [ApiController]
    public class VendaController : ControllerBase
    {
        private readonly ApiContext context;

        public VendaController(ApiContext context)
        {
            this.context = context;
        }

        [HttpGet]
        public async Task<JsonResult> Get(
            string? searchCliente = "", 
            string? searchProduto = "", 
            DateTime? minDate = null, 
            DateTime? maxDate = null, 
            int? pageNumber = null, 
            int? maxResults = null)
        {
            // Número máximo de resultados apresentados
            maxResults = maxResults != null ? maxResults : 10;

            // Número da página
            pageNumber = pageNumber != null ? (pageNumber - 1) * maxResults : 0;

            // Inicia a construção da consulta para Vendas 
            IQueryable<Venda> vendas = this.context.Vendas;

            // Filtragem por cliente
            if (!string.IsNullOrEmpty(searchCliente))
            {
                vendas = vendas.Where(v => v.Cliente!.Nome!.ToLower().Contains(searchCliente.ToLower()));
            }

            // Filtragem por produto
            if (!string.IsNullOrEmpty(searchProduto))
            {
                vendas = vendas.Where(v => v.Itens!.Any(
                        i => i.Produto!.Nome!.ToLower().Contains(searchProduto.ToLower())
                    )
                );
            }

            // Filtragem por data inicial
            if (minDate.HasValue)
            {
                vendas = vendas.Where(v => v.Data >= minDate);
            }

            // Filtragem por data final
            if (maxDate.HasValue)
            {
                vendas = vendas.Where(v => v.Data <= maxDate);
            }

            try
            {
                // Retorna todas as vendas
                return new JsonResult(Ok(
                        await PaginatedList<VendaReport>.CreateAsync(
                            vendas.AsNoTracking().Select(v => new VendaReport
                            {
                                Id = v.Id,
                                IdCliente = v.IdCliente,
                                Data = v.Data,
                                Cliente = v.Cliente,
                                Itens = v.Itens!
                                    .Where(i => i.Produto!.Nome!.ToLower().Contains(
                                        searchProduto!.ToLower()
                                        )
                                    )
                                    .Select(i => new ItemVenda
                                    {
                                        Id = i.IdProduto,
                                        Produto = i.Produto,
                                        PrecoUnitario = i.PrecoUnitario,
                                        Quantidade = i.Quantidade
                                    })
                            }),
                            pageNumber.Value,
                            maxResults.Value
                        )
                    )
                );
            }
            catch (Exception e)
            {
                return new JsonResult(BadRequest(e.Message));
            }
        }
    }
}
