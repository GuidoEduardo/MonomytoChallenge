// <auto-generated />
#nullable enable
using System.Diagnostics;
using FluentValidation;
using FluentValidation.Results;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using MonomytoChallenge.Models;
using Newtonsoft.Json;


namespace MonomytoChallenge.Data
{
    public class DataInitializer
    {
        private static readonly HttpClient Client = new HttpClient();

        // Executa a função de população de banco de dados
        public static void SeedAll(ApiContext context, WebApplication app)
        {
            SeedModel<Cliente>(context, app.Configuration["Url:Clientes"]);
            SeedModel<Produto>(context, app.Configuration["Url:Catalogo"]);
            SeedModel<Venda>(context, app.Configuration["Url:Vendas"]);
        }

        // Popula o model selecionado com o JSON da Url
        // Caso Local seja true, adicionar caminho de um arquivo
        public static void SeedModel<TEntity>(ApiContext context, string path)
            where TEntity : class
        {
            // Captura o validador da Entidade
            IValidator<TEntity> validator = context.GetService<IValidator<TEntity>>();

            // Captura o JSON
            HttpResponseMessage response = Client.Send(new HttpRequestMessage(HttpMethod.Get, path));
            response.EnsureSuccessStatusCode();
            string responseBody = new StreamReader(response.Content.ReadAsStream()).ReadToEnd();

            // Popula a lista da Entidade
            List<TEntity>? elementList = JsonConvert.DeserializeObject<List<TEntity>>(
                responseBody,
                new JsonSerializerSettings
                {
                    Error = (sender, args) =>
                    {
                        Debug.WriteLine(args.ErrorContext.Error.Message);
                        args.ErrorContext.Handled = true;
                    },
                });

            if (elementList != null)
            {
                // Valida para cada elemento na lista
                foreach (TEntity element in elementList)
                {
                    ValidationResult result = validator.Validate(element);

                    if (result.IsValid)
                    {
                        context.Set<TEntity>().Add(element);
                    }
                }

                // Realiza um Bulk Save
                try
                {
                    context.SaveChanges();
                }
                catch (DbUpdateException e)
                {
                    Debug.WriteLine(e);
                }
            }
        }
    }
}
